{
	"name": "C#",
	"scopeName": "source.cs",
	"fileTypes": ["cs", "csx"],
	"information_for_contributors": [
		"Copyright @RohitKushvaha01"
	],
	"patterns": [
		{ "include": "#shebang" },
		{ "include": "#code" }
	],
	"repository": {
		"shebang": {
			"name": "comment.line.shebang.cs",
			"match": "^#!.*(?=$)",
			"captures": {
				"0": { "name": "punctuation.definition.comment.cs" }
			}
		},
		"code": {
			"patterns": [
				{ "include": "#comments" },
				{ "include": "#attributes" },
				{ "include": "#preprocessor" },
				{ "include": "#type-declarations" },
				{ "include": "#variables" },
				{ "include": "#keywords" },
				{ "include": "#strings" },
				{ "include": "#constants-and-numbers" },
				{ "include": "#method-declarations" },
				{ "include": "#property-declarations" },
				{ "include": "#lambda-expressions" },
				{ "include": "#type-operators" },
				{ "include": "#operators" }
			]
		},
		"comments": {
			"patterns": [
				{
					"name": "comment.line.double-slash.cs",
					"begin": "///",
					"while": "^\\s*///",
					"patterns": [
						{ "include": "#xml-doc-comments" }
					]
				},
				{
					"name": "comment.line.double-slash.cs",
					"match": "//.*$"
				},
				{
					"name": "comment.block.cs",
					"begin": "/\\*",
					"end": "\\*/",
					"captures": {
						"0": { "name": "punctuation.definition.comment.cs" }
					}
				}
			]
		},
		"xml-doc-comments": {
			"patterns": [
				{
					"match": "(</?)(param|typeparam|see|seealso|summary|remarks|returns|value|list|exception)\\b",
					"captures": {
						"1": { "name": "punctuation.definition.tag.cs" },
						"2": { "name": "entity.name.tag.cs" }
					}
				},
				{
					"match": "(\\w+)(:)(\\s*[^\\s<>]+)",
					"captures": {
						"1": { "name": "storage.type.cs" },
						"2": { "name": "punctuation.separator.cs" },
						"3": { "name": "entity.name.type.cs" }
					}
				}
			]
		},
		"attributes": {
			"name": "meta.attribute.cs",
			"begin": "\\[",
			"end": "\\]",
			"patterns": [
				{ "include": "#strings" },
				{ "include": "#constants-and-numbers" },
				{
					"match": "\\b(\\w+)",
					"captures": {
						"1": { "name": "entity.name.attribute.cs" }
					}
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.cs",
					"match": "\\b(if|else|while|for|foreach|return|continue|break|switch|case|default|do|goto|throw|try|catch|finally|using|namespace|class|struct|interface|enum|delegate|event|operator|record|init|with|when|is|as|not|and|or|sizeof|typeof)\\b"
				},
				{
					"name": "storage.modifier.cs",
					"match": "\\b(public|private|protected|internal|static|readonly|sealed|abstract|virtual|override|async|partial|new|ref|in|out|params|const|volatile|unsafe|extern|implicit|explicit|lock|checked|unchecked)\\b"
				},
				{
					"name": "storage.type.cs",
					"match": "\\b(bool|byte|sbyte|char|decimal|double|float|int|uint|long|ulong|object|short|ushort|string|dynamic|var|void|Task|ValueTask)\\b"
				},
				{
					"name": "constant.language.cs",
					"match": "\\b(true|false|null|default|nameof|base|this)\\b"
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"name": "string.quoted.double.cs",
					"begin": "\"",
					"end": "\"",
					"patterns": [
						{
							"name": "constant.character.escape.cs",
							"match": "\\\\([\"\\\\0abfnrtv]|x[0-9a-fA-F]{1,4}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})"
						}
					]
				},
				{
					"name": "string.interpolated.cs",
					"begin": "\\$\"",
					"end": "\"",
					"patterns": [
						{
							"name": "meta.interpolation.cs",
							"begin": "\\{",
							"end": "\\}",
							"patterns": [
								{ "include": "#code" }
							]
						},
						{
							"name": "constant.character.escape.cs",
							"match": "\\\\."
						}
					]
				}
			]
		},
		"constants-and-numbers": {
			"patterns": [
				{
					"name": "constant.numeric.decimal.cs",
					"match": "\\b\\d+\\.\\d+(?:[eE][-+]?\\d+)?[fFdDmM]?"
				},
				{
					"name": "constant.numeric.integer.cs",
					"match": "\\b\\d+\\b"
				},
				{
					"name": "constant.numeric.hex.cs",
					"match": "\\b0[xX][0-9a-fA-F]+\\b"
				}
			]
		},
		"variables": {
			"patterns": [
				{
					"name": "variable.other.cs",
					"match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b(?=\\s*(?:=|in|as|is|;|,))"
				}
			]
		},
		"method-declarations": {
			"patterns": [
				{
					"name": "meta.method.cs",
					"begin": "\\b([a-zA-Z_][a-zA-Z0-9_<>]*)\\s+([a-zA-Z_][a-zA-Z0-9_]+)\\s*\\(",
					"end": "\\)",
					"captures": {
						"1": { "name": "storage.type.cs" },
						"2": { "name": "entity.name.function.cs" }
					},
					"patterns": [
						{ "include": "#parameters" }
					]
				}
			]
		},
		"property-declarations": {
			"patterns": [
				{
					"name": "meta.property.cs",
					"match": "\\b([a-zA-Z_][a-zA-Z0-9_<>]*)\\s+([a-zA-Z_][a-zA-Z0-9_]+)\\s*(?={|=>|;)",
					"captures": {
						"1": { "name": "storage.type.cs" },
						"2": { "name": "entity.name.function.cs" }
					}
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"name": "keyword.operator.cs",
					"match": "\\+|-|\\*|/|%|\\+=|-=|\\*=|/=|%=|==|!=|<=|>=|&&|\\|\\||!|~|\\?|:|->|=>"
				}
			]
		}
	}
}
